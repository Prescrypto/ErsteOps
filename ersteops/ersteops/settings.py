"""
Django settings for ersteops project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
# Parse database configuration from $DATABASE_URL
import dj_database_url
# To transform strings from environment variables to boolean values
import ast


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'yzz21x+6-uhkx((v4p+7!u7p@kt&rm+ap&(wzd2hgi&m#zx7u1'
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
DEBUG = ast.literal_eval(os.environ['DEBUG_STATE'])

#ALLOWED_HOSTS = []

# Check if we are in production
PRODUCTION = ast.literal_eval(os.environ['PRODUCTION'])
# Change allowed hosts accordingly
if PRODUCTION:
    ALLOWED_HOSTS = [os.environ['HEROKU_APP_NAME']+".herokuapp.com"]
else:
    # Correct way
    #ALLOWED_HOSTS = [os.environ['ALLOWED_HOSTS']]
    ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'emergency.apps.EmergencyConfig',
    'vehicle.apps.VehicleConfig',
    'odoodb.apps.OdoodbConfig'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ersteops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #'DIRS': [],
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ersteops.wsgi.application'

#APPEND_SLASH=False
# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# EVALUATE IF DATABESA IS LOCAL O REMOTE
DATABASE_LOCAL =  ast.literal_eval(os.environ['DATABASE_LOCAL'])
DATABASE_URL = os.environ['DATABASE_URL']
DATABASE_REMOTE_URL = os.environ['DATABASE_REMOTE_URL']
#DATABASE_ODOO_URL = os.environ['DATABASE_ODOO_URL']

ODOO_HEROKU_HOST = os.environ['ODOO_HEROKU_HOST']
ODOO_HEROKU_DB = os.environ['ODOO_HEROKU_DB']
ODOO_HEROKU_USER = os.environ['ODOO_HEROKU_USER']
ODOO_HEROKU_PASSWD = os.environ['ODOO_HEROKU_PASSWD']
ODDO_HEROKU_PORT = os.environ['ODDO_HEROKU_PORT']

if DATABASE_LOCAL:
    DATABASES = {
                'default': dj_database_url.config(default=DATABASE_URL),
                #'odoodb': dj_database_url.config(default=DATABASE_ODOO_URL),
                'odoodb' :{
                    'ENGINE': 'django.db.backends.postgresql_psycopg2',
                    'NAME': ODOO_HEROKU_DB,
                    'USER': ODOO_HEROKU_USER,
                    'PASSWORD': ODOO_HEROKU_PASSWD,
                    'HOST' : ODOO_HEROKU_HOST,
                    'PORT': ODDO_HEROKU_PORT,

                },
                }
else:
    DATABASES = {
                'default': dj_database_url.config(default=DATABASE_REMOTE_URL),
                }

DATABASE_ROUTERS = ['odoodb.OdooDBRouter.OdooDBRouter']

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Console logging for DEBUG=False - Probably should disable if DEBUG = True
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    "formatters": {
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'loggers': {
        'django_info': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        }
    },
}
